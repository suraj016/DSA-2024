public class ReverseBinarySearch {
    public static int binarySearchReverseSorted(int[] arr, int target) {
        int left = 0;
        int right = arr.length - 1;

        while (left <= right) {
            int mid = left + (right - left) / 2;

            // Check if target is present at mid
            if (arr[mid] == target) {
                return mid;
            }
            // Since the array is sorted in descending order
            else if (arr[mid] < target) {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }

        // Target not found
        return -1;
    }

    public static void main(String[] args) {
        int[] arr = {20, 15, 10, 5, 2, 1};  // Reverse sorted array
        int target = 10;
        int result = binarySearchReverseSorted(arr, target);

        if (result != -1) {
            System.out.println("Element found at index " + result);
        } else {
            System.out.println("Element not found in array");
        }
    }
}


TIME COMPLEXITY = O(log n)
concept is simple it is using reverse binary search