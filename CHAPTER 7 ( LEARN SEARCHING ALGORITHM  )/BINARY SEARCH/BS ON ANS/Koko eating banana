LEETCODE NO 875 

Koko loves to eat bananas. There are n piles of bananas, the ith pile has piles[i] bananas. The guards have gone and will come back in h hours.

Koko can decide her bananas-per-hour eating speed of k. Each hour, she chooses some pile of bananas and eats k bananas from that pile. If the pile has less than k bananas, she eats all of them instead and will not eat any more bananas during this hour.

Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return.

Return the minimum integer k such that she can eat all the bananas within h hours.

 

Example 1:

Input: piles = [3,6,7,11], h = 8
Output: 4
Example 2:

Input: piles = [30,11,23,4,20], h = 5
Output: 30
Example 3:

Input: piles = [30,11,23,4,20], h = 6
Output: 23
 

Constraints:

1 <= piles.length <= 104
piles.length <= h <= 109
1 <= piles[i] <= 109



SOLUTIONS 

class Solution {

    // Method to calculate total hours required for a given speed
    public static int totalhr(int[] piles, int h) {
        int total = 0;
        for (int i = 0; i < piles.length; i++) { // No need for <= length-1, just < length
            total += Math.ceil((double) piles[i] / h); // Cast to double for accurate division
        }
        return total;
    }

    // Method to find the maximum value in the piles array
    public static int max(int[] piles) {
        int maxi = piles[0]; // Corrected from arr to piles

        // Traverse array elements from the second and compare every element with current max
        for (int i = 1; i < piles.length; i++) {
            if (piles[i] > maxi) {
                maxi = piles[i];
            }
        }

        return maxi;
    }

    // Method to find the minimum eating speed
    public int minEatingSpeed(int[] piles, int h) {
        int low = 1;
        int high = max(piles); // Use the corrected max method
        int ans = -1;

        while (low <= high) {
            int mid = low + (high - low) / 2;
            int totalhr = totalhr(piles, mid); // Call totalhr method properly
            if (totalhr <= h) {
                ans = mid;
                high = mid - 1; // Reduce high to search for smaller valid speed
            } else {
                low = mid + 1; // Increase low to search for higher speed
            }
        }
        return ans;
    }
}
