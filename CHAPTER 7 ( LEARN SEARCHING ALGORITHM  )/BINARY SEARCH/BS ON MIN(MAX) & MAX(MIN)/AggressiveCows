PROBLEM STATEMENT

Aggressive Cows

You are given an array with unique elements of stalls[], which denote the position of a stall.
You are also given an integer k which denotes the number of aggressive cows.
Your task is to assign stalls to k cows such that the minimum distance between any two of them is the maximum possible.

Examples :

Input: stalls[] = [1, 2, 4, 8, 9], k = 3
Output: 3
Explanation: The first cow can be placed at stalls[0], 
the second cow can be placed at stalls[2] and 
the third cow can be placed at stalls[3]. 
The minimum distance between cows, in this case, is 3, which also is the largest among all possible ways.


Input: stalls[] = [10, 1, 2, 7, 5], k = 3
Output: 4
Explanation: The first cow can be placed at stalls[0],
the second cow can be placed at stalls[1] and
the third cow can be placed at stalls[4].
The minimum distance between cows, in this case, is 4, which also is the largest among all possible ways.

Input: stalls[] = [2, 12, 11, 3, 26, 7], k = 5
Output: 1
Explanation: Each cow can be placed in any of the stalls, as the no. of stalls are exactly equal to the number of cows.
The minimum distance between cows, in this case, is 1, which also is the largest among all possible ways.


Constraints:
2 <= stalls.size() <= 106
0 <= stalls[i] <= 108
1 <= k <= stalls.size()

SOLUTIONS

BRUTE FORCE:

class Solution {
    
    public static boolean canWePlace(int[] stalls, int dist, int cows) {
       int n = stalls.length; //size of array
       int cntCows = 1; //no. of cows placed
       int last = stalls[0]; //position of last placed cow.
       for (int i = 1; i < n; i++) {
           if (stalls[i] - last >= dist) {
               cntCows++; //place next cow.
               last = stalls[i]; //update the last location.
           }
           if (cntCows >= cows) return true;
       }
       return false;
   }

   public static int aggressiveCows(int[] stalls, int k) {
       int n = stalls.length; //size of array
       //sort the stalls[]:
       Arrays.sort(stalls);

       int limit = stalls[n - 1] - stalls[0];
       for (int i = 1; i <= limit; i++) {
           if (canWePlace(stalls, i, k) == false) {
               return (i - 1);
           }
       }
       return limit;
       
      
   }
}

TIME COMPLEXITY -> 
SPACE COMPLEXITY -> 



OPTIMIZED BINARY SEARCH 

class Solution {
    
    public static boolean canWePlace(int[] stalls, int dist, int cows) {
       int n = stalls.length; //size of array
       int cntCows = 1; //no. of cows placed
       int last = stalls[0]; //position of last placed cow.
       for (int i = 1; i < n; i++) {
           if (stalls[i] - last >= dist) {
               cntCows++; //place next cow.
               last = stalls[i]; //update the last location.
           }
           if (cntCows >= cows) return true;
       }
       return false;
   }
   public static int aggressiveCows(int[] stalls, int k) {
     
         int n = stalls.length; //size of array
       //sort the stalls[]:
       Arrays.sort(stalls);

       int low = 1, high = stalls[n - 1] - stalls[0];
       //apply binary search:
       while (low <= high) {
           int mid = (low + high) / 2;
           if (canWePlace(stalls, mid, k) == true) {
               low = mid + 1;
           } else high = mid - 1;
       }
       return high;
   }
}


TIME COMPLEXITY -> 
SPACE COMPLEXITY -> 
