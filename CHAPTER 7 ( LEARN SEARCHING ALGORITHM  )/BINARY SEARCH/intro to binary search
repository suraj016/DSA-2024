ITERATIVE CODE


import java.util.*;

public class tUf {

    public static int binarySearch(int[] nums, int target) {
        int n = nums.length; //size of the array.
        int low = 0, high = n - 1;

        // Perform the steps:
        while (low <= high) {
            int mid = (low + high) / 2;
            if (nums[mid] == target) return mid;
            else if (target > nums[mid]) low = mid + 1;
            else high = mid - 1;
        }
        return -1;
    }

    public static void main(String[] args) {
        int[] a = {3, 4, 6, 7, 9, 12, 16, 17};
        int target = 6;
        int ind = binarySearch(a, target);
        if (ind == -1)
            System.out.println("The target is not present.");
        else
            System.out.println("The target is at index: " + ind);
    }
} 



RECURSIVE CODE




import java.util.*;

public class tUf {

    public static int binarySearch(int[] nums, int low, int high, int target) {
        if (low > high) return -1; //Base case.

        // Perform the steps:
        int mid = (low + high) / 2;
        if (nums[mid] == target) return mid;
        else if (target > nums[mid])
            return binarySearch(nums, mid + 1, high, target);
        return binarySearch(nums, low, mid - 1, target);
    }

    public static int search(int[] nums, int target) {
        return binarySearch(nums, 0, nums.length - 1, target);
    }

    public static void main(String[] args) {
        int[] a = {3, 4, 6, 7, 9, 12, 16, 17};
        int target = 6;
        int ind = search(a, target);
        if (ind == -1)
            System.out.println("The target is not present.");
        else
            System.out.println("The target is at index: " + ind);
    }
}

 HOW TO UNDERSTAND THAT IF A PROBLEM  REQUIRED BINARY SEARCH OR NOT

 1. Given A, a sorted int array of length n. How many times does the value x occur in A.


 2.Given a real number x, find out it’s cubic root.


 3. Given A a sorted array of distinct integers, find out an i such that A[i] == i.


4 . Given the +,-,*,/,sqrt operations and a real number x find an algorithm to get log_2(x).


5 . Given an array A such that A[ 0] > A[ 1] and A[n-1] > A[n-2] find out a local minimum (find out an i such that A[i-1] > A[i] < A[i + 1]).


6. Let A be a sorted array with distinct elements. A is rotated k positions to the right (k is unknown). Find out k.


7. Let A be a sorted array with distinct elements. A is rotated k positions to the right (k is unknown). Find out if A contains a number x.


8 . Given two sorted arrays of length n and m, find out the kth element of their sorted union.
An array is bitonic if it is comprised of an increasing sequence of integers followed immediately by a decreasing sequence of integers.


9 .  Write a program that, given a bitonic array of N distinct int values, determines whether a given integer is in the array.


10. Write a program that, given an array of N distinct int values in ascending order, determines whether a given integer is in the array.
 You may use only additions and subtractions and a constant amount of extra memory. 
 The running time of your program should be proportional to log N in the worst case.


11. Given a convex polygon with n sides, find the radius of the largest circle which can be placed fully inside the polygon.


12. Given a string A find the largest substring of A that is a palindrome (rolling hash based solution).


13 . Given a set of n points, find the smallest number S such that all the n points can be covered with 3 axis aligned squares with side length S.


14 . Given a number x, what’s the smallest n such that numbers 1 to n contain the digit 6 in a total of x times.
