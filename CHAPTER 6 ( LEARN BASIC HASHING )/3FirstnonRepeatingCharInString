/*
 * Time Complexity: O(n2)
   Auxiliary Space: O(1)
 */





 public class FirstUniqueCharacter {

    // Function to find the index of the first non-repeating
    // character
    public static int firstUniqChar(String s)
    {
        int n = s.length();
        // two pointer approach

        // Step 1: Iterate over each character in the string
        for (int i = 0; i < n; ++i) {
            boolean found = true;

            // Step 2: Check if the character repeats in the
            // rest of the string
            // The condition i != j ensures that the character isn't compared with itself.
            for (int j = 0; j < n; ++j) {
                if (i != j && s.charAt(i) == s.charAt(j)) {
                    found = false;
                    break;
                }
            }

            // Step 3: If character does not repeat, return
            // its index
            if (found) {
                return i;
            }
        }

        // Step 4: If no such character is found, return -1
        return -1;
    }

    // Driver code
    public static void main(String[] args)
    {
        String s = "geeksforgeeks";
        System.out.println(firstUniqChar(s));
    }
}




import java.util.*;

public class Main {
    // Function to find the index of the first non-repeating
    // character
    public static int firstUniqChar(String s)
    {
       
        int[] freq = new int[26];

        /*  int[] freq = new int[26];: This creates an array of size 26,
         which represents each lowercase letter in the English alphabet ('a' to 'z').
         Each index in the array corresponds to a specific letter,
        //  and the value at that index will store the frequency of that letter. */

        // Step 2: Populate the frequency array
        for (char c : s.toCharArray()) {
            freq[c - 'a']++;
        }

       

        // Step 3: Find the first character with frequency 1
        for (int i = 0; i < s.length(); ++i) {
            if (freq[s.charAt(i) - 'a'] == 1) {
                return i;
            }
        }

        return -1;
    }

    // Driver code
    public static void main(String[] args)
    {
        String s = "geeksforgeeks";
        System.out.println(firstUniqChar(s));
    }
}



// by using hashmap 

import java.util.HashMap;
import java.util.Map;

public class FirstUniqueCharacter {

    // Function to find the index of the first non-repeating character
    public static int firstUniqChar(String s) {
        // Step 1: Create a HashMap to store character frequencies
        HashMap<Character, Integer> frequencyMap = new HashMap<>();

        // Step 2: Populate the HashMap with frequencies of each character
        for (char c : s.toCharArray()) {
            frequencyMap.put(c, frequencyMap.getOrDefault(c, 0) + 1);
        }

        // Step 3: Find the first character with frequency 1
        for (int i = 0; i < s.length(); i++) {
            if (frequencyMap.get(s.charAt(i)) == 1) {
                return i;  // Return the index of the first non-repeating character
            }
        }

        // Step 4: If no such character exists, return -1
        return -1;
    }

    // Driver code
    public static void main(String[] args) {
        String s = "geeksforgeeks";
        int result = firstUniqChar(s);
        System.out.println(result);
    }
}

