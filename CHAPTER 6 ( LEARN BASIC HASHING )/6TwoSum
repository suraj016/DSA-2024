Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

 

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]

//        BRUTE FORCE APPROACH

class Solution {
    public int[] twoSum(int[] nums, int target) {
        int n = nums.length;
        for (int i = 0; i < n - 1; i++) {
            for (int j = i + 1; j < n; j++) {
                if (nums[i] + nums[j] == target) {
                    return new int[]{i, j};
                }
            }
        }
        return new int[]{}; // No solution found
    }
}
 


 //       OPTIMIZED APPROACH

 class Solution {
    public int[] twoSum(int[] nums, int target) {
        int s=nums.length;
        HashMap <Integer, Integer> mp=new HashMap<>();
        for(int i =0;i<s;i++)
        {   
            int complement=target-nums[i]; //getting the value we need by subtracting the target with the current value 
            
            if(mp.containsKey(complement)) //if the map already contains the "n" we are looking for
            {
                return new int[]{i,mp.get(complement)};  //print there indexes 
            }
            mp.put(nums[i],i); //putting the value and its index onto the map
             
            
           
        }
        return new int[0]; // return if u cant find indices

        /*
        
           If nums = [2, 7, 11, 15] and target = 9:

Iteration 1:
i = 0, nums[0] = 2, complement = 9 - 2 = 7.
7 is not in the HashMap, so store 2 with its index 0 in mp.
Iteration 2:
i = 1, nums[1] = 7, complement = 9 - 7 = 2.
2 is in the HashMap (from the previous step), so return {1, 0} (indices of 7 and 2).

        
        */
}
}