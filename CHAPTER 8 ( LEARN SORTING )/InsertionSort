class Solution {
    // Function to perform Insertion Sort on the given array
    public void insertionSort(int[] nums) {
        // Step 1: Iterate through the array starting from index 1
        // The first element is considered to be already sorted
        for (int i = 1; i < nums.length; i++) {
            
            // Step 2: Store the current element (key) to be inserted in the sorted part of the array
            int key = nums[i];
            
            // Step 3: Initialize the variable 'j' to the previous index of 'i' (i-1)
            int j = i - 1;
            
            // Step 4: Move elements of the sorted portion of the array that are greater than 'key'
            // one position to the right to make space for the 'key' element
            while (j >= 0 && nums[j] > key) {
                nums[j + 1] = nums[j];  // Move the larger element one position to the right
                j--;  // Move to the previous element
            }
            
            // Step 5: Insert the 'key' element at its correct position in the sorted portion
            nums[j + 1] = key;
        }
    }
}


Time Complexity = O(n*2)  in the worst and average cases; 
O(n) in the best case (when the array is already sorted, with an optimized implementation).
Space Complexity = O(1)